- name: Install packages
  apt: name={{ item }}
  with_items:
    - nginx

- name: Create directories
  file: path={{ item }} state=directory mode=0755
  with_items:
    - "{{ data_path }}"
    - "{{ conf_path }}"
    - "/var/log/www/{{ web_server_name }}"
#    - "{{ ssl_path }}"

- name: Create web static path
  file: path={{ static_path }} state=directory owner=www-data

#- name: Docker registry login
#  shell: docker login -u {{ docker_registry.username }} -e {{ docker_registry.username }} -p {{ docker_registry.password }} {{ docker_registry.address }}
#
- name: Pull image
  shell: docker pull "{{ image_name }}"

- name: Stop container
  docker_container:
      image: "{{ image_name }}"
      name: "{{ container_name }}"
      state: absent

#
#- name: Get service settings
#  vault:
#    path: "secret/service/{{ service }}/{{ deploy }}"
#  register: settings
#  delegate_to: localhost
#  become: false
#  no_log: true
#

- name: Create settings
  template: src=local_settings.py.jinja2 dest={{ conf_path }}/local_settings.py mode=0600


#- name: Start container db
#  docker_container:
#    image: postgres:9.6.3
#    name: "{{ container_name }}-db"
#    volumes: "{{ data_path }}/db:/var/lib/postgresql/data/"
#    restart_policy: always
#    state: started
#    hostname: "{{ container_name }}_db_{{ ansible_hostname }}"
#    env:
#      POSTGRES_PASSWORD: "{{ settings.DATABASES.default.PASSWORD }}"
#      POSTGRES_USER: "{{ service }}"
#      POSTGRES_NAME: "{{ service }}"
#
#
- name: Start container
  docker_container:
      image: "{{ image_name }}"
      name: "{{ container_name }}"
      ports: "{{ container_ports }}"
      volumes:
        - "{{ data_path }}:/data"
        - "{{ conf_path }}:/conf"
        - "{{ static_path }}:/static"
      restart_policy: always
      state: started
      hostname: "{{ container_name }}_{{ ansible_hostname }}"
      network_mode: host
      env:
        SERVICE_NAME: "{{ container_name }}"
#      dns_servers:
#        - "{{ dns }}"

#- name : Get CA certificate
#  vault:
#    path: secret/ssl/ca
#  register: ca
#  delegate_to: localhost
#  become: false
#
#- name: Copy CA.crt
#  shell: echo "{{ ca.crt }}" > {{ ssl_path }}/mobilCA.crt


- name: Create nginx config
  template: src=nginx.jinja2 dest="/etc/nginx/sites-enabled/{{ container_name }}"

- name: Restart NGINX
  shell: systemctl restart nginx
